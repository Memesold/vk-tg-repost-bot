import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from vk_api import VkApi, VkApiError
import time
import json
import os
import requests
import sqlite3
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

USER_DATA_FILE = 'user_data.json'
DB_FILE = 'user_data.db'

class UserConfig:
    def __init__(self):
        self.init_db()

    def init_db(self):
        """Initialize the database and create tables if they don't exist"""
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        # Create users table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                data TEXT
            )
        ''')
        
        conn.commit()
        conn.close()

    def get_user_data(self, user_id: int) -> dict:
        """Get user data from database"""
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('SELECT data FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        conn.close()
        
        if result:
            return json.loads(result[0])
        return {}

    def update_user_data(self, user_id: int, key: str, value):
        """Update user data in database"""
        # Get current user data
        user_data = self.get_user_data(user_id)
        user_data[key] = value
        
        # Save updated data
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, data) 
            VALUES (?, ?)
        ''', (user_id, json.dumps(user_data)))
        
        conn.commit()
        conn.close()

    def get_bots(self, user_id: int) -> list:
        """Get all bot configurations for a user"""
        user_data = self.get_user_data(user_id)
        return user_data.get('bots', [])

    def get_bot(self, user_id: int, bot_index: int) -> dict:
        """Get specific bot configuration by index (0-2)"""
        bots = self.get_bots(user_id)
        if 0 <= bot_index < len(bots):
            return bots[bot_index]
        return {}

    def update_bot(self, user_id: int, bot_index: int, bot_data: dict):
        """Update specific bot configuration"""
        # Get current user data
        user_data = self.get_user_data(user_id)
        
        # Initialize bots list if it doesn't exist
        if 'bots' not in user_data:
            user_data['bots'] = [{}, {}, {}]  # Initialize with 3 empty slots
        
        # Ensure we have enough slots
        while len(user_data['bots']) <= bot_index:
            user_data['bots'].append({})
            
        user_data['bots'][bot_index] = bot_data
        
        # Save updated data
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, data) 
            VALUES (?, ?)
        ''', (user_id, json.dumps(user_data)))
        
        conn.commit()
        conn.close()

    def delete_bot(self, user_id: int, bot_index: int):
        """Delete specific bot configuration"""
        # Get current user data
        user_data = self.get_user_data(user_id)
        
        # Check if user has bots data
        if 'bots' in user_data:
            if 0 <= bot_index < len(user_data['bots']):
                user_data['bots'][bot_index] = {}
                
                # Save updated data
                conn = sqlite3.connect(DB_FILE)
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT OR REPLACE INTO users (user_id, data) 
                    VALUES (?, ?)
                ''', (user_id, json.dumps(user_data)))
                
                conn.commit()
                conn.close()

    def get_last_post_id(self, user_id: int, bot_index: int = 0) -> int:
        """Get last post ID for specific bot"""
        user_data = self.get_user_data(user_id)
        bots = user_data.get('bots', [])
        if 0 <= bot_index < len(bots) and bots[bot_index]:
            return bots[bot_index].get('last_post_id', 0)
        return 0

    def set_last_post_id(self, user_id: int, bot_index: int, post_id: int):
        """Set last post ID for specific bot"""
        # Get current bots data
        bots = self.get_bots(user_id)
        
        # Ensure we have enough slots
        while len(bots) <= bot_index:
            bots.append({})
        
        # Initialize bot data if empty
        if not bots[bot_index]:
            bots[bot_index] = {}
            
        # Set the last post ID
        bots[bot_index]['last_post_id'] = post_id
        
        # Update the bot data in database
        self.update_bot(user_id, bot_index, bots[bot_index])

class VKParser:
    def __init__(self, token: str, group_id: str):
        self.vk_session = VkApi(token=token)
        self.vk = self.vk_session.get_api()
        self.group_id = group_id
        self.api_version = '5.131'

    def get_new_posts(self, last_checked_id: int) -> tuple[list, int]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
            response = self.vk.wall.get(
                owner_id=self.group_id,
                count=10,
                filter='owner',
                v=self.api_version
            )
            
            new_posts = []
            current_max_id = last_checked_id
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ ID (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            sorted_posts = sorted(response['items'], key=lambda x: x['id'])
            
            for post in sorted_posts:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –∏ —Ä–µ–∫–ª–∞–º—É
                if post.get('is_pinned') or post.get('marked_as_ads'):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç –Ω–æ–≤—ã–º
                if post['id'] > last_checked_id:
                    new_posts.append(post)
                    if post['id'] > current_max_id:
                        current_max_id = post['id']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–æ ID (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            new_posts.sort(key=lambda x: x['id'])
            
            if new_posts:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã: {len(new_posts)}. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID: {current_max_id}")
            else:
                logger.info(f"–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_checked_id}")
            
            return new_posts, current_max_id
            
        except VkApiError as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK API: {e}")
            return [], last_checked_id
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}", exc_info=True)
            return [], last_checked_id

class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.user_config = UserConfig()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏"""
        user = update.effective_user
        user_id = user.id
        user_data = self.user_config.get_user_data(user_id)
        bots = self.user_config.get_bots(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–¥–∏–Ω –±–æ—Ç)
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ—ë –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if not bots and any(k in user_data for k in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel']):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–æ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ä–æ–≥–æ
            old_bot = {}
            for key in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel']:
                if key in user_data:
                    old_bot[key] = user_data[key]
            
            # –î–æ–±–∞–≤–ª—è–µ–º last_post_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if 'last_post_id' in user_data:
                old_bot['last_post_id'] = user_data['last_post_id']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –±–æ—Ç –∫–∞–∫ –ø–µ—Ä–≤—ã–π –±–æ—Ç –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            bots = [old_bot, {}, {}]
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for i, bot in enumerate(bots):
                if bot:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    self.user_config.update_bot(user_id, i, bot)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel', 'last_post_id']:
                if key in user_data:
                    user_data.pop(key)
            self.user_config.data[str(user_id)] = user_data
            self.user_config.save()
        else:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ 3 —Å–ª–æ—Ç–∞ –¥–ª—è –±–æ—Ç–æ–≤
            while len(bots) < 3:
                bots.append({})
        
        text = (
            f"‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b> ‚ú®\n\n"
            "üöÄ <i>–≠—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ "
            "–ø–æ—Å—Ç–æ–≤ –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –≤ Telegram</i>\n\n"
            "üìä <b>–í–∞—à–∏ –±–æ—Ç—ã:</b>\n"
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        for i, bot in enumerate(bots):
            if bot:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                is_complete = all(k in bot for k in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel'])
                status_emoji = "üü¢" if is_complete else "üü°"
                text += f"{status_emoji} <b>–ë–æ—Ç #{i+1}:</b> {'–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' if is_complete else '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"
            else:
                text += f"üî¥ <b>–ë–æ—Ç #{i+1}:</b> –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        
        text += "\nüîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏", callback_data='manage_bots')],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –±–æ—Ç—ã", callback_data='check_all_bots')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def manage_bots_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        bots = self.user_config.get_bots(user_id)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ 3 —Å–ª–æ—Ç–∞ –¥–ª—è –±–æ—Ç–æ–≤
        while len(bots) < 3:
            bots.append({})
        
        text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        
        keyboard = []
        for i, bot in enumerate(bots):
            if bot:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                is_complete = all(k in bot for k in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel'])
                status_text = "–ì–æ—Ç–æ–≤" if is_complete else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                keyboard.append([InlineKeyboardButton(f"üîß –ë–æ—Ç #{i+1} ({status_text})", callback_data=f'edit_bot_{i}')])
            else:
                keyboard.append([InlineKeyboardButton(f"‚ûï –ë–æ—Ç #{i+1} (–î–æ–±–∞–≤–∏—Ç—å)", callback_data=f'edit_bot_{i}')])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_start')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def edit_bot_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_index: int):
        """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        bot = self.user_config.get_bot(user_id, bot_index)
        
        # –≠–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        vk_token_status = "üü¢" if bot.get('vk_token') else "üî¥"
        vk_group_status = "üü¢" if bot.get('vk_group_id') else "üî¥"
        tg_bot_status = "üü¢" if bot.get('tg_bot_token') else "üî¥"
        tg_channel_status = "üü¢" if bot.get('tg_channel') else "üî¥"
        
        text = (
            f"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–æ—Ç–∞ #{bot_index+1}</b>\n\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n"
            f"{vk_token_status} <b>–¢–æ–∫–µ–Ω VK:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('vk_token') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"{vk_group_status} <b>ID –≥—Ä—É–ø–ø—ã VK:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('vk_group_id') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"{tg_bot_status} <b>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('tg_bot_token') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"{tg_channel_status} <b>–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('tg_channel') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîê –¢–æ–∫–µ–Ω VK", callback_data=f'set_vk_token_{bot_index}'),
                InlineKeyboardButton("üñºÔ∏è ID –≥—Ä—É–ø–ø—ã", callback_data=f'set_vk_group_id_{bot_index}')
            ],
            [
                InlineKeyboardButton("ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞", callback_data=f'set_tg_bot_token_{bot_index}'),
                InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data=f'set_tg_channel_{bot_index}')
            ],
            [
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'check_now_{bot_index}'),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç", callback_data=f'delete_bot_{bot_index}')
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_bots')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def input_setting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str, bot_index: int = 0):
        """–ö—Ä–∞—Å–∏–≤—ã–µ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å –±–æ—Ç–∞ –∏–∑ setting_type, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–µ–∫—Å
        if '_' in setting_type:
            parts = setting_type.split('_')
            if len(parts) >= 3 and parts[-1].isdigit():
                setting_type = '_'.join(parts[:-1])
                bot_index = int(parts[-1])
        
        prompts = {
            'vk_token': (
                "üîê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ VK</b>\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: vk.com/apps?act=manage\n"
                "2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ <i>Standalone</i>\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ <b>–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω:</b>"
            ),
            'vk_group_id': (
                "üñºÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID –≥—Ä—É–ø–ø—ã VK</b>\n\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∏–∑ –∞–¥—Ä–µ—Å–∞:\n"
                "   - –î–ª—è <i>vk.com/club123456</i> –≤–≤–µ–¥–∏—Ç–µ: <b>-123456</b>\n"
                "   - –î–ª—è <i>vk.com/public123456</i> –≤–≤–µ–¥–∏—Ç–µ: <b>-123456</b>\n\n"
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã:</b>"
            ),
            'tg_bot_token': (
                "ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ Telegram</b>\n\n"
                "1. –ù–∞–ø–∏—à–∏—Ç–µ <i>@BotFather</i>\n"
                "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/newbot</code>\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n\n"
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:</b>"
            ),
            'tg_channel': (
                "üì¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ Telegram</b>\n\n"
                "1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
                "2. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "3. –£–∫–∞–∂–∏—Ç–µ @username (–Ω–∞–ø—Ä–∏–º–µ—Ä <i>@my_channel</i>)\n"
                "   –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä <i>-100123456789</i>)\n\n"
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:</b>"
            )
        }
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'edit_bot_{bot_index}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            prompts[setting_type],
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –±–æ—Ç–∞
        self.user_config.update_user_data(update.effective_user.id, 'awaiting_input', f"{setting_type}_{bot_index}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        user_data = self.user_config.get_user_data(user_id)
        
        if user_data.get('awaiting_input'):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å –±–æ—Ç–∞
            awaiting_input = user_data['awaiting_input']
            if '_' in awaiting_input and awaiting_input.split('_')[-1].isdigit():
                parts = awaiting_input.split('_')
                bot_index = int(parts[-1])
                setting_type = '_'.join(parts[:-1])
            else:
                setting_type = awaiting_input
                bot_index = 0
            
            value = update.message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
            if setting_type == 'tg_channel':
                if not (value.startswith('@') or value.startswith('-')):
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏–ª–∏ -")
                    return
            elif setting_type == 'vk_group_id':
                if not value.lstrip('-').isdigit():
                    await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–¥–ª—è –≥—Ä—É–ø–ø —Å –º–∏–Ω—É—Å–æ–º)")
                    return
                # –î–ª—è –≥—Ä—É–ø–ø –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not value.startswith('-') and int(value) != 0:
                    value = f"-{value.lstrip('-')}"
            
            # –î–ª—è —Ç–æ–∫–µ–Ω–∞ VK –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if setting_type == 'vk_token':
                try:
                    test_vk = VkApi(token=value)
                    test_vk.method('groups.getById', {'group_id': '1', 'v': '5.131'})
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω VK: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                    return
            
            # –î–ª—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ Telegram –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if setting_type == 'tg_bot_token':
                try:
                    test_url = f"https://api.telegram.org/bot{value}/getMe"
                    response = requests.get(test_url, timeout=10)
                    if not response.json().get('ok'):
                        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        return
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {e}")
                    return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            bot_data = self.user_config.get_bot(user_id, bot_index)
            if not bot_data:
                bot_data = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
            bot_data[setting_type] = value
            self.user_config.update_bot(user_id, bot_index, bot_data)
            self.user_config.update_user_data(user_id, 'awaiting_input', None)
            
            await update.message.reply_text(f"‚úÖ {setting_type} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}!")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
                await self.show_bot_menu_in_message(update, context, bot_index)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
                keyboard = [
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞", callback_data=f'edit_bot_{bot_index}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )

    async def show_bot_menu_in_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_index: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = update.effective_user.id
        bot = self.user_config.get_bot(user_id, bot_index)
        
        # –≠–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–∞
        vk_token_status = "üü¢" if bot.get('vk_token') else "üî¥"
        vk_group_status = "üü¢" if bot.get('vk_group_id') else "üî¥"
        tg_bot_status = "üü¢" if bot.get('tg_bot_token') else "üî¥"
        tg_channel_status = "üü¢" if bot.get('tg_channel') else "üî¥"
        
        text = (
            f"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–æ—Ç–∞ #{bot_index+1}</b>\n\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫:</b>\n"
            f"{vk_token_status} <b>–¢–æ–∫–µ–Ω VK:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('vk_token') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"{vk_group_status} <b>ID –≥—Ä—É–ø–ø—ã VK:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('vk_group_id') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"{tg_bot_status} <b>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('tg_bot_token') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"{tg_channel_status} <b>–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b> {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot.get('tg_channel') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            "üîß <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üîê –¢–æ–∫–µ–Ω VK", callback_data=f'set_vk_token_{bot_index}'),
                InlineKeyboardButton("üñºÔ∏è ID –≥—Ä—É–ø–ø—ã", callback_data=f'set_vk_group_id_{bot_index}')
            ],
            [
                InlineKeyboardButton("ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞", callback_data=f'set_tg_bot_token_{bot_index}'),
                InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data=f'set_tg_channel_{bot_index}')
            ],
            [
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f'check_now_{bot_index}'),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç", callback_data=f'delete_bot_{bot_index}')
            ],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_bots')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
        if query.data == 'manage_bots':
            await self.manage_bots_menu(update, context)
        elif query.data == 'check_all_bots':
            await self.check_all_bots(update, context)
        elif query.data.startswith('edit_bot_'):
            bot_index = int(query.data.split('_')[-1])
            await self.edit_bot_menu(update, context, bot_index)
        elif query.data.startswith('delete_bot_'):
            bot_index = int(query.data.split('_')[-1])
            await self.delete_bot(update, context, bot_index)
        elif query.data.startswith('confirm_delete_bot_'):
            bot_index = int(query.data.split('_')[-1])
            await self.confirm_delete_bot(update, context, bot_index)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
        elif query.data.startswith('set_vk_token_'):
            bot_index = int(query.data.split('_')[-1])
            await self.input_setting(update, context, f'vk_token_{bot_index}', bot_index)
        elif query.data.startswith('set_vk_group_id_'):
            bot_index = int(query.data.split('_')[-1])
            await self.input_setting(update, context, f'vk_group_id_{bot_index}', bot_index)
        elif query.data.startswith('set_tg_bot_token_'):
            bot_index = int(query.data.split('_')[-1])
            await self.input_setting(update, context, f'tg_bot_token_{bot_index}', bot_index)
        elif query.data.startswith('set_tg_channel_'):
            bot_index = int(query.data.split('_')[-1])
            await self.input_setting(update, context, f'tg_channel_{bot_index}', bot_index)
        elif query.data.startswith('check_now_'):
            bot_index = int(query.data.split('_')[-1])
            await self.check_now_bot(update, context, bot_index)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        elif query.data == 'back_to_start':
            await self.start(update, context)
        elif query.data == 'help':
            await self.show_help(update, context)
        elif query.data == 'check_now':
            await self.check_now(update, context)
        elif query.data == 'set_vk_token':
            await self.input_setting(update, context, 'vk_token', 0)
        elif query.data == 'set_vk_group_id':
            await self.input_setting(update, context, 'vk_group_id', 0)
        elif query.data == 'set_tg_bot_token':
            await self.input_setting(update, context, 'tg_bot_token', 0)
        elif query.data == 'set_tg_channel':
            await self.input_setting(update, context, 'tg_channel', 0)
        elif query.data == 'check_settings':
            await self.start(update, context)

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ—â–∏"""
        text = (
            "üìö <b>–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ</b> üìö\n\n"
            "üîπ <b>1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ VK</b>\n"
            "   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href='https://vk.com/apps?act=manage'>—Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏</a>\n"
            "   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ <i>Standalone</i>\n"
            "   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ <b>–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            "üîπ <b>2. ID –≥—Ä—É–ø–ø—ã VK</b>\n"
            "   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É\n"
            "   ‚Ä¢ –î–ª—è –∞–¥—Ä–µ—Å–∞ <i>vk.com/club123456</i> –≤–≤–µ–¥–∏—Ç–µ <b>-123456</b>\n"
            "   ‚Ä¢ –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã <i>vk.com/id123456</i> –≤–≤–µ–¥–∏—Ç–µ <b>123456</b>\n\n"
            "üîπ <b>3. –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞</b>\n"
            "   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ <i>@BotFather</i>\n"
            "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/newbot</code>\n"
            "   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n\n"
            "üîπ <b>4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞</b>\n"
            "   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
            "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞\n\n"
            "üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</b>\n"
            "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∏—Ö –≤ –≤–∞—à –∫–∞–Ω–∞–ª!"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìπ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url='https://example.com/tutorial')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text, 
            reply_markup=reply_markup, 
            parse_mode='HTML',
            disable_web_page_preview=True
        )

    async def delete_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_index: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        text = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ #{bot_index+1}</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞? –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_bot_{bot_index}')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'edit_bot_{bot_index}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def confirm_delete_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_index: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        
        # –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞
        self.user_config.delete_bot(user_id, bot_index)
        
        text = f"‚úÖ <b>–ë–æ—Ç #{bot_index+1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
        
        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –±–æ—Ç–∞–º", callback_data='manage_bots')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def check_all_bots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        user_id = update.effective_user.id
        bots = self.user_config.get_bots(user_id)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ 3 —Å–ª–æ—Ç–∞ –¥–ª—è –±–æ—Ç–æ–≤
        while len(bots) < 3:
            bots.append({})
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        message = await update.callback_query.edit_message_text(
            "üîç <b>–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –±–æ—Ç–∞—Ö...</b>\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
            parse_mode='HTML'
        )
        
        results = []
        for i, bot in enumerate(bots):
            if bot and all(k in bot for k in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel']):
                try:
                    last_post_id = self.user_config.get_last_post_id(user_id, i)
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ #{i+1}, –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_post_id}")
                    vk_parser = VKParser(bot['vk_token'], bot['vk_group_id'])
                    posts, new_last_post_id = vk_parser.get_new_posts(last_post_id)
                    
                    if posts:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π last_post_id –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        self.user_config.set_last_post_id(user_id, i, new_last_post_id)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ #{i+1}, –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: {new_last_post_id}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
                        sent_posts = 0
                        failed_posts = 0
                        for post in posts:
                            try:
                                await self._forward_post(post, bot['tg_bot_token'], bot['tg_channel'], context)
                                sent_posts += 1
                                logger.info(f"–ü–æ—Å—Ç #{post['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ #{i+1}")
                            except Exception as e:
                                failed_posts += 1
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ #{post['id']} –¥–ª—è –±–æ—Ç–∞ #{i+1}: {e}")
                            
                            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                        
                        results.append(f"‚úÖ –ë–æ—Ç #{i+1}: –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {sent_posts} –ø–æ—Å—Ç–æ–≤, –æ—à–∏–±–æ–∫: {failed_posts}")
                    else:
                        results.append(f"üü¢ –ë–æ—Ç #{i+1}: –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç")
                except VkApiError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ VK API –¥–ª—è –±–æ—Ç–∞ #{i+1}: {e}")
                    results.append(f"üî¥ –ë–æ—Ç #{i+1}: –û—à–∏–±–∫–∞ VK API")
                except Exception as e:
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –±–æ—Ç–∞ #{i+1}: {e}", exc_info=True)
                    results.append(f"üî¥ –ë–æ—Ç #{i+1}: –û—à–∏–±–∫–∞")
            elif bot:
                results.append(f"üü° –ë–æ—Ç #{i+1}: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            else:
                results.append(f"üî¥ –ë–æ—Ç #{i+1}: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –±–æ—Ç–æ–≤:</b>\n\n" + "\n".join(results)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_all_bots')],
            [InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.edit_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def check_now_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, bot_index: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        user_id = update.effective_user.id
        bot = self.user_config.get_bot(user_id, bot_index)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        missing = []
        if not bot.get('vk_token'):
            missing.append("—Ç–æ–∫–µ–Ω VK")
        if not bot.get('vk_group_id'):
            missing.append("ID –≥—Ä—É–ø–ø—ã VK")
        if not bot.get('tg_bot_token'):
            missing.append("—Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        if not bot.get('tg_channel'):
            missing.append("–∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            
        if missing:
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f'edit_bot_{bot_index}')],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_bots')]
            ]
            await update.callback_query.edit_message_text(
                f"üî¥ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}!</b>\n\n"
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: <b>{', '.join(missing)}</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            return
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        message = await update.callback_query.edit_message_text(
            f"üîç <b>–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}...</b>\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
            parse_mode='HTML'
        )
        
        try:
            last_post_id = self.user_config.get_last_post_id(user_id, bot_index)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ #{bot_index+1}, –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_post_id}")
            vk_parser = VKParser(bot['vk_token'], bot['vk_group_id'])
            posts, new_last_post_id = vk_parser.get_new_posts(last_post_id)
            
            if not posts:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f'check_now_{bot_index}')],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'edit_bot_{bot_index}')]
                ]
                await message.edit_text(
                    f"üü¢ <b>–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}</b>\n\n"
                    "–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.\n\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π ID: <code>{last_post_id}</code>",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π last_post_id –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                self.user_config.set_last_post_id(user_id, bot_index, new_last_post_id)
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞ #{bot_index+1}, –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: {new_last_post_id}")
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
                total_posts = len(posts)
                sent_posts = 0
                failed_posts = 0
                
                for i, post in enumerate(posts, 1):
                    await message.edit_text(
                        f"üì§ <b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}...</b>\n\n"
                        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent_posts}/{total_posts}</b>\n"
                        f"‚ùå –û—à–∏–±–æ–∫: <b>{failed_posts}</b>\n"
                        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—Å—Ç #{post['id']}",
                        parse_mode='HTML'
                    )
                    try:
                        await self._forward_post(post, bot['tg_bot_token'], bot['tg_channel'], context)
                        sent_posts += 1
                        logger.info(f"–ü–æ—Å—Ç #{post['id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞ #{bot_index+1}")
                    except Exception as e:
                        failed_posts += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ #{post['id']} –¥–ª—è –±–æ—Ç–∞ #{bot_index+1}: {e}")
                    
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f'check_now_{bot_index}')],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'edit_bot_{bot_index}')]
                ]
                await message.edit_text(
                    f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}!</b>\n\n"
                    f"–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{sent_posts}</b> –ø–æ—Å—Ç–æ–≤\n"
                    f"–û—à–∏–±–æ–∫: <b>{failed_posts}</b>\n\n"
                    f"–ö–∞–Ω–∞–ª: <b>{bot['tg_channel']}</b>\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: <code>{new_last_post_id}</code>",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                
        except VkApiError as e:
            logger.error(f"–û—à–∏–±–∫–∞ VK API –¥–ª—è –±–æ—Ç–∞ #{bot_index+1}: {e}")
            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f'edit_bot_{bot_index}')],
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_bots')]
            ]
            await message.edit_text(
                f"üî¥ <b>–û—à–∏–±–∫–∞ VK API –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ VK –∏ ID –≥—Ä—É–ø–ø—ã.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –±–æ—Ç–∞ #{bot_index+1}: {e}", exc_info=True)
            keyboard = [
                [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_bots')]
            ]
            await message.edit_text(
                f"üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ë–æ—Ç–∞ #{bot_index+1}</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

    async def check_now(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –Ω–æ–≤–æ–µ –º–µ–Ω—é"""
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏
        await self.manage_bots_menu(update, context)

    async def _forward_post(self, post: dict, bot_token: str, channel: str, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            text = post.get('text', '–ù–æ–≤—ã–π –ø–æ—Å—Ç')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Telegram)
            if len(text) > 4096:
                text = text[:4093] + "..."
            
            if post.get('attachments'):
                media = []
                for attach in post['attachments']:
                    if attach['type'] == 'photo':
                        photo = attach['photo']
                        sizes = photo['sizes']
                        max_size = max(sizes, key=lambda x: x['width'] * x['height'])
                        media.append(max_size['url'])
                
                if media:
                    if len(media) > 1:
                        await self._send_media_group(text, media, bot_token, channel)
                    else:
                        await self._send_photo(text, media[0], bot_token, channel)
                    return
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            if text.strip():  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                await self._send_message(text, bot_token, channel)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")

    async def _send_message(self, text: str, bot_token: str, channel: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            'chat_id': channel,
            'text': text,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
        return response

    async def _send_photo(self, text: str, photo_url: str, bot_token: str, channel: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–ª–∏–º–∏—Ç 1024 —Å–∏–º–≤–æ–ª–∞)
        if len(text) > 1024:
            text = text[:1021] + "..."
            
        url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
        payload = {
            'chat_id': channel,
            'photo': photo_url,
            'caption': text,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.text}")
        return response

    async def _send_media_group(self, text: str, media_urls: list, bot_token: str, channel: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"""
        url = f"https://api.telegram.org/bot{bot_token}/sendMediaGroup"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–ª–∏–º–∏—Ç 1024 —Å–∏–º–≤–æ–ª–∞)
        if len(text) > 1024:
            text = text[:1021] + "..."
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ –¥–æ 10 (–ª–∏–º–∏—Ç Telegram)
        media_urls = media_urls[:10]
        
        media = [{
            'type': 'photo',
            'media': url,
            'caption': text if i == 0 else '',
            'parse_mode': 'HTML'
        } for i, url in enumerate(media_urls)]
        
        payload = {
            'chat_id': channel,
            'media': media  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
        }
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {response.text}")
        return response

    async def _auto_check_posts(self, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, data FROM users')
        users = cursor.fetchall()
        conn.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user_row in users:
            user_id = user_row[0]
            user_data = json.loads(user_row[1]) if user_row[1] else {}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bots = user_data.get('bots', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for bot_index, bot in enumerate(bots):
                if bot and all(k in bot for k in ['vk_token', 'vk_group_id', 'tg_bot_token', 'tg_channel']):
                    try:
                        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –±–æ—Ç #{bot_index+1}")
                        last_post_id = self.user_config.get_last_post_id(user_id, bot_index)
                        vk_parser = VKParser(bot['vk_token'], bot['vk_group_id'])
                        posts, new_last_post_id = vk_parser.get_new_posts(last_post_id)
                        
                        if posts:
                            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –±–æ—Ç #{bot_index+1}")
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π last_post_id –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                            self.user_config.set_last_post_id(user_id, bot_index, new_last_post_id)
                            
                            for post in posts:
                                await self._forward_post(post, bot['tg_bot_token'], bot['tg_channel'], context)
                                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                            
                    except VkApiError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ VK API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –±–æ—Ç #{bot_index+1}: {e}")
                    except Exception as e:
                        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –±–æ—Ç #{bot_index+1}: {e}", exc_info=True)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
        job_queue = application.job_queue
        job_queue.run_repeating(
            self._auto_check_posts,
            interval=33.0,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            first=10.0
        )
        
        application.run_polling()

if __name__ == '__main__':
    # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞
    BOT_TOKEN = 'YOUR_BOT_TOKEN'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    
    bot = TelegramBot(BOT_TOKEN)
    bot.run()
